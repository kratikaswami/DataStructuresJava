
public interface Tree <D extends Comparable>{
	
	//interface signatures.
	public boolean isEmpty();
	public int cardinality();
	public boolean member(D elt);
	public NonEmptyBST<D> add(D elt);

}


public class NonEmptyBST<D extends Comparable> implements Tree<D> {

	D data;
	Tree<D> left;
	Tree<D> right;
	
	//constructor with root only.
	public NonEmptyBST(D elt){
		data = elt;
		left = new EmptyBST<D>();
		right = new EmptyBST<D>();
	}
	
	//constructor with root, left and right element.
	public NonEmptyBST(D elt, Tree<D> leftTree, Tree<D> rightTree){
		data = elt;
		left = leftTree;
		right = rightTree;
	}
	
	//check if the tree is empty.
	public boolean isEmpty(){
		return false;
	}
	
	//check the number of elements in the tree.
	public int cardinality(){
		return 1 + left.cardinality() + right.cardinality();
	}
	
	//check if an element is a member.
	public boolean member(D elt){
		if(data == elt){
			return true;
		}
		else{
			if(elt.compareTo(data) < 0){
				return left.member(elt);
				}
			else{
				return right.member(elt);
			}
		}
	}
	
	//add an element to the tree.
	public NonEmptyBST<D> add(D elt){
		if(data == elt){
			return this;
		}else{
			if(elt.compareTo(data) < 0){
				return new NonEmptyBST(data, left.add(elt), right);
			}
			else{
				return new NonEmptyBST(data, left, right.add(elt));
			}
		}
	}
	
}



public class EmptyBST<D extends Comparable> implements Tree<D> {

	//constructor
	public EmptyBST(){
		
	}
	
	//check if the Tree is empty.
	public boolean isEmpty(){
		return true;
	}
	
	//the number of elements in the Tree.
	public int cardinality(){
		return 0;
	}
	
	//check if the member is a part of the tree.
	public boolean member(D elt){
		return false;
	}
	
	//add new element to the tree.
	public NonEmptyBST<D> add(D elt){
		return new NonEmptyBST<D> (elt);
	}
}



